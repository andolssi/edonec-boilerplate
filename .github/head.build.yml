name: "build and deploy images to ${{stage}} env on PR approve"

on:
${{changeTrigger}}

jobs:
  send-compose-files-to-server:
    runs-on: ubuntu-latest
${{changeCondition}}

    steps:
      - uses: actions/checkout@v3 # Checking out the repo

      - name: Operations
        uses: alinz/ssh-scp-action@master
        env:
          HELLO: ${{ secrets.PORT }}
          MESSAGE: ${{ secrets.USERNAME }}
        with:
          key: ${{ secrets.${{STAGE}}_PRIVATE_KEY }}
          host: ${{ secrets.${{STAGE}}_HOST }}
          port: ${{ secrets.PORT }}
          user: ${{ secrets.USERNAME }}
          # runs this on remove server
          ssh_before: |
            rm -rf /docker/${{stage}} || true

          # then uploads these 2 files
          scp: |
            compose/${{stage}} ${{ secrets.USERNAME }}@${{ secrets.${{STAGE}}_HOST }}:/docker/${{stage}}

  deploy-to-${{stage}}:
    runs-on: ubuntu-latest
    needs: [send-compose-files-to-server]
    steps:
      - name: Set the value
        run: |
          echo "GH_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          echo "USERNAME=${{ secrets.USERNAME }}" >> $GITHUB_ENV
      - name: remote docker-compose up via ssh
        uses: appleboy/ssh-action@master
        env:
          APPTOKEN: ${{ secrets.GITHUB_TOKEN }}
          USERNAME: ${{ env.USERNAME }}
          DATABASE_USER: ${{ secrets.DATABASE_USER}}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD}}
          AWS_REGION: ${{ secrets.AWS_REGION}}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          CONTAINERS_PORT: 3000
          NODE_ENV: ${{ secrets.NODE_ENV}}
          ACCESS_TOKEN_SECRET_KEY: ${{ secrets.${{STAGE}}_ACCESS_TOKEN_SECRET_KEY}}
          REFRESH_TOKEN_SECRET_KEY: ${{ secrets.${{STAGE}}_REFRESH_TOKEN_SECRET_KEY}}
          TOKEN_EXPIRES_IN: ${{ secrets.TOKEN_EXPIRES_IN}}
          REFRESH_TOKEN_EXPIRES_IN: ${{ secrets.REFRESH_TOKEN_EXPIRES_IN}}
          ROOT_USER_EMAIL: ${{ secrets.ROOT_USER_EMAIL }}
          ROOT_USER_PASSWORD: ${{ secrets.ROOT_USER_PASSWORD }}
        with:
          host: ${{ secrets.${{STAGE}}_HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.${{STAGE}}_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          envs: APPTOKEN,USERNAME,DATABASE_USER,DATABASE_PASSWORD,AWS_REGION,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,CONTAINERS_PORT,NODE_ENV,ACCESS_TOKEN_SECRET_KEY,REFRESH_TOKEN_SECRET_KEY,TOKEN_EXPIRES_IN,REFRESH_TOKEN_EXPIRES_IN,ROOT_USER_PASSWORD,ROOT_USER_PASSWORD
          script: |
            echo $APPTOKEN | docker login ghcr.io -u $USERNAME --password-stdin
            cd /docker/${{stage}}
            rm -f .env || true
            rm -f fullchain.pem || true
            rm -f privkey.pem || true
            echo DATABASE_USER=$DATABASE_USER >> .env
            echo DATABASE_PASSWORD=$DATABASE_PASSWORD >> .env
            echo AWS_REGION=$AWS_REGION >> .env
            echo AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID >> .env
            echo AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY >> .env
            echo PORT=$CONTAINERS_PORT >> .env
            echo NODE_ENV=$NODE_ENV >> .env
            echo ACCESS_TOKEN_SECRET_KEY=$ACCESS_TOKEN_SECRET_KEY >> .env
            echo ROOT_USER_EMAIL=$ROOT_USER_EMAIL >> .env
            echo ROOT_USER_PASSWORD=$ROOT_USER_PASSWORD >> .env
            echo REFRESH_TOKEN_SECRET_KEY=$REFRESH_TOKEN_SECRET_KEY >> .env
            echo TOKEN_EXPIRES_IN=$TOKEN_EXPIRES_IN >> .env
            echo REFRESH_TOKEN_EXPIRES_IN=$REFRESH_TOKEN_EXPIRES_IN >> .env
            cp ../fullchain.pem .
            cp ../privkey.pem .
            docker-compose up -d --remove-orphans

  ${{jobs}}


  end-to-end-test-${{stage}}-deployment:
    runs-on: ubuntu-latest
    needs: ${{needs}}
    steps:
      - name: lets see
        run: |
          echo "Hello world"
