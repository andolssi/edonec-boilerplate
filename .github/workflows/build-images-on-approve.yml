name: "build and deploy images to head env on PR approve"

on:
  pull_request_review:
    types: [submitted]
    paths:
      - "apps/**"
      - ".docker/Dockerfile.*"
      - "packages/**"
      - "package.json"
      - "compose/head/*"

jobs:
  send-compose-files-to-server:
    runs-on: ubuntu-latest
    if: (github.ref != 'refs/heads/master') && (github.ref != 'refs/heads/develop') && (github.event.review.state == 'approved')

    steps:
      - uses: actions/checkout@v3 # Checking out the repo

      - name: Operations
        uses: alinz/ssh-scp-action@master
        env:
          HELLO: ${{ secrets.PORT }}
          MESSAGE: ${{ secrets.USERNAME }}
        with:
          key: ${{ secrets.HEAD_PRIVATE_KEY }}
          host: ${{ secrets.HEAD_HOST }}
          port: ${{ secrets.PORT }}
          user: ${{ secrets.USERNAME }}
          # runs this on remove server
          ssh_before: |
            rm -rf /docker/head || true

          # then uploads these 2 files
          scp: |
            compose/head ${{ secrets.USERNAME }}@${{ secrets.HEAD_HOST }}:/docker/head

  deploy-to-head:
    runs-on: ubuntu-latest
    needs: [send-compose-files-to-server]
    steps:
      - name: Set the value
        run: |
          echo "GH_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          echo "USERNAME=${{ secrets.USERNAME }}" >> $GITHUB_ENV
      - name: remote docker-compose up via ssh
        uses: appleboy/ssh-action@master
        env:
          APPTOKEN: ${{ secrets.GITHUB_TOKEN }}
          USERNAME: ${{ env.USERNAME }}
          DATABASE_USER: ${{ secrets.DATABASE_USER}}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD}}
          AWS_REGION: ${{ secrets.AWS_REGION}}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          CONTAINERS_PORT: 3000
          NODE_ENV: ${{ secrets.NODE_ENV}}
          ACCESS_TOKEN_SECRET_KEY: ${{ secrets.HEAD_ACCESS_TOKEN_SECRET_KEY}}
          REFRESH_TOKEN_SECRET_KEY: ${{ secrets.HEAD_REFRESH_TOKEN_SECRET_KEY}}
          TOKEN_EXPIRES_IN: ${{ secrets.TOKEN_EXPIRES_IN}}
          REFRESH_TOKEN_EXPIRES_IN: ${{ secrets.REFRESH_TOKEN_EXPIRES_IN}}
          ROOT_USER_EMAIL: ${{ secrets.ROOT_USER_EMAIL }}
          ROOT_USER_PASSWORD: ${{ secrets.ROOT_USER_PASSWORD }}
          UPLOAD_SECRET_KEY: ${{ secrets.UPLOAD_SECRET_KEY }}
        with:
          host: ${{ secrets.HEAD_HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.HEAD_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          envs: APPTOKEN,USERNAME,DATABASE_USER,DATABASE_PASSWORD,AWS_REGION,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,CONTAINERS_PORT,NODE_ENV,ACCESS_TOKEN_SECRET_KEY,REFRESH_TOKEN_SECRET_KEY,TOKEN_EXPIRES_IN,REFRESH_TOKEN_EXPIRES_IN,ROOT_USER_PASSWORD,ROOT_USER_PASSWORD,UPLOAD_SECRET_KEY
          script: |
            echo $APPTOKEN | docker login ghcr.io -u $USERNAME --password-stdin
            cd /docker/head
            rm -f .env || true
            rm -f fullchain.pem || true
            rm -f privkey.pem || true
            echo DATABASE_USER=$DATABASE_USER >> .env
            echo DATABASE_PASSWORD=$DATABASE_PASSWORD >> .env
            echo AWS_REGION=$AWS_REGION >> .env
            echo AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID >> .env
            echo AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY >> .env
            echo PORT=$CONTAINERS_PORT >> .env
            echo NODE_ENV=$NODE_ENV >> .env
            echo ACCESS_TOKEN_SECRET_KEY=$ACCESS_TOKEN_SECRET_KEY >> .env
            echo ROOT_USER_EMAIL=$ROOT_USER_EMAIL >> .env
            echo ROOT_USER_PASSWORD=$ROOT_USER_PASSWORD >> .env
            echo REFRESH_TOKEN_SECRET_KEY=$REFRESH_TOKEN_SECRET_KEY >> .env
            echo TOKEN_EXPIRES_IN=$TOKEN_EXPIRES_IN >> .env
            echo REFRESH_TOKEN_EXPIRES_IN=$REFRESH_TOKEN_EXPIRES_IN >> .env
            echo UPLOAD_SECRET_KEY=$UPLOAD_SECRET_KEY >> .env
            cp ../fullchain.pem .
            cp ../privkey.pem .

  proxy-balancer-build-and-publish-head:
    runs-on: ubuntu-latest
    if: (github.ref != 'refs/heads/master') && (github.ref != 'refs/heads/develop') && (github.event.review.state == 'approved')
    steps:
      - uses: actions/checkout@v3
      - name: Build and Publish Tag Docker image
        uses: VaultVulp/gp-docker-action@1.2.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Provide GITHUB_TOKEN to login into the GitHub Packages
          image-name: proxy-balancer # Provide only Docker image name
          dockerfile: .docker/Dockerfile.proxy-balancer
          image-tag: head
  proxy-balancer-deploy-to-head:
    runs-on: ubuntu-latest
    needs: [deploy-to-head, proxy-balancer-build-and-publish-head, ]
    steps:
      - name: Set the value
        run: |
          echo "GH_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          echo "USERNAME=${{ secrets.USERNAME }}" >> $GITHUB_ENV
      - name: remote docker-compose up via ssh
        uses: appleboy/ssh-action@master
        env:
          APPTOKEN: ${{ secrets.GITHUB_TOKEN }}
          USERNAME: ${{ env.USERNAME }}
        with:
          host: ${{ secrets.HEAD_HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.HEAD_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          envs: APPTOKEN,USERNAME
          script: |
            echo $APPTOKEN | docker login ghcr.io -u $USERNAME --password-stdin
            cd /docker/head
            docker pull ghcr.io/edonec/boilerplate/proxy-balancer:head
            docker-compose up --no-deps --build --force-recreate -d proxy-balancer

  auth-build-and-publish-head:
    runs-on: ubuntu-latest
    if: (github.ref != 'refs/heads/master') && (github.ref != 'refs/heads/develop') && (github.event.review.state == 'approved')
    steps:
      - uses: actions/checkout@v3
      - name: Build and Publish Tag Docker image
        uses: VaultVulp/gp-docker-action@1.2.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Provide GITHUB_TOKEN to login into the GitHub Packages
          image-name: auth # Provide only Docker image name
          dockerfile: .docker/Dockerfile.auth
          image-tag: head
  auth-deploy-to-head:
    runs-on: ubuntu-latest
    needs: [deploy-to-head, auth-build-and-publish-head, proxy-balancer-deploy-to-head]
    steps:
      - name: Set the value
        run: |
          echo "GH_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          echo "USERNAME=${{ secrets.USERNAME }}" >> $GITHUB_ENV
      - name: remote docker-compose up via ssh
        uses: appleboy/ssh-action@master
        env:
          APPTOKEN: ${{ secrets.GITHUB_TOKEN }}
          USERNAME: ${{ env.USERNAME }}
        with:
          host: ${{ secrets.HEAD_HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.HEAD_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          envs: APPTOKEN,USERNAME
          script: |
            echo $APPTOKEN | docker login ghcr.io -u $USERNAME --password-stdin
            cd /docker/head
            docker pull ghcr.io/edonec/boilerplate/auth:head
            docker-compose up --no-deps --build --force-recreate -d auth

  bucket-build-and-publish-head:
    runs-on: ubuntu-latest
    if: (github.ref != 'refs/heads/master') && (github.ref != 'refs/heads/develop') && (github.event.review.state == 'approved')
    steps:
      - uses: actions/checkout@v3
      - name: Build and Publish Tag Docker image
        uses: VaultVulp/gp-docker-action@1.2.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Provide GITHUB_TOKEN to login into the GitHub Packages
          image-name: bucket # Provide only Docker image name
          dockerfile: .docker/Dockerfile.bucket
          image-tag: head
  bucket-deploy-to-head:
    runs-on: ubuntu-latest
    needs: [deploy-to-head, bucket-build-and-publish-head, proxy-balancer-deploy-to-head, auth-deploy-to-head]
    steps:
      - name: Set the value
        run: |
          echo "GH_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          echo "USERNAME=${{ secrets.USERNAME }}" >> $GITHUB_ENV
      - name: remote docker-compose up via ssh
        uses: appleboy/ssh-action@master
        env:
          APPTOKEN: ${{ secrets.GITHUB_TOKEN }}
          USERNAME: ${{ env.USERNAME }}
        with:
          host: ${{ secrets.HEAD_HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.HEAD_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          envs: APPTOKEN,USERNAME
          script: |
            echo $APPTOKEN | docker login ghcr.io -u $USERNAME --password-stdin
            cd /docker/head
            docker pull ghcr.io/edonec/boilerplate/bucket:head
            docker-compose up --no-deps --build --force-recreate -d bucket

  client-build-and-publish-head:
    runs-on: ubuntu-latest
    if: (github.ref != 'refs/heads/master') && (github.ref != 'refs/heads/develop') && (github.event.review.state == 'approved')
    steps:
      - uses: actions/checkout@v3
      - name: Build and Publish Tag Docker image
        uses: VaultVulp/gp-docker-action@1.2.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Provide GITHUB_TOKEN to login into the GitHub Packages
          image-name: client # Provide only Docker image name
          dockerfile: .docker/Dockerfile.client
          image-tag: head
  client-deploy-to-head:
    runs-on: ubuntu-latest
    needs: [deploy-to-head, client-build-and-publish-head, proxy-balancer-deploy-to-head, auth-deploy-to-head, bucket-deploy-to-head]
    steps:
      - name: Set the value
        run: |
          echo "GH_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          echo "USERNAME=${{ secrets.USERNAME }}" >> $GITHUB_ENV
      - name: remote docker-compose up via ssh
        uses: appleboy/ssh-action@master
        env:
          APPTOKEN: ${{ secrets.GITHUB_TOKEN }}
          USERNAME: ${{ env.USERNAME }}
        with:
          host: ${{ secrets.HEAD_HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.HEAD_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          envs: APPTOKEN,USERNAME
          script: |
            echo $APPTOKEN | docker login ghcr.io -u $USERNAME --password-stdin
            cd /docker/head
            docker pull ghcr.io/edonec/boilerplate/client:head
            docker-compose up --no-deps --build --force-recreate -d client

  dashboard-build-and-publish-head:
    runs-on: ubuntu-latest
    if: (github.ref != 'refs/heads/master') && (github.ref != 'refs/heads/develop') && (github.event.review.state == 'approved')
    steps:
      - uses: actions/checkout@v3
      - name: Build and Publish Tag Docker image
        uses: VaultVulp/gp-docker-action@1.2.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Provide GITHUB_TOKEN to login into the GitHub Packages
          image-name: dashboard # Provide only Docker image name
          dockerfile: .docker/Dockerfile.dashboard
          image-tag: head
  dashboard-deploy-to-head:
    runs-on: ubuntu-latest
    needs: [deploy-to-head, dashboard-build-and-publish-head, proxy-balancer-deploy-to-head, auth-deploy-to-head, bucket-deploy-to-head, client-deploy-to-head]
    steps:
      - name: Set the value
        run: |
          echo "GH_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          echo "USERNAME=${{ secrets.USERNAME }}" >> $GITHUB_ENV
      - name: remote docker-compose up via ssh
        uses: appleboy/ssh-action@master
        env:
          APPTOKEN: ${{ secrets.GITHUB_TOKEN }}
          USERNAME: ${{ env.USERNAME }}
        with:
          host: ${{ secrets.HEAD_HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.HEAD_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          envs: APPTOKEN,USERNAME
          script: |
            echo $APPTOKEN | docker login ghcr.io -u $USERNAME --password-stdin
            cd /docker/head
            docker pull ghcr.io/edonec/boilerplate/dashboard:head
            docker-compose up --no-deps --build --force-recreate -d dashboard


  end-to-end-test-head-deployment:
    runs-on: ubuntu-latest
    needs: [proxy-balancer-deploy-to-head, auth-deploy-to-head, bucket-deploy-to-head, client-deploy-to-head, dashboard-deploy-to-head]
    steps:
      - name: lets see
        run: |
          echo "Hello world"
