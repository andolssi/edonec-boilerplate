version: "3.9"
services:
  database:
    image: mongo:6.0.5
    restart: always
    environment:
      - HOST_URL=${HOST_URL}
      - NEXT_PUBLIC_HOSTNAME=${HOST_URL}
      - MONGO_INITDB_ROOT_USERNAME=${DATABASE_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${DATABASE_PASSWORD}
    networks:
      - main-network
  imgproxy:
    image: darthsim/imgproxy:v3.15.0
    restart: always
    environment:
      - HOST_URL=${HOST_URL}
      - NEXT_PUBLIC_HOSTNAME=${HOST_URL}
      - IMGPROXY_BIND=:${PORT}
      - IMGPROXY_S3_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - IMGPROXY_USE_S3=true
      - STORAGE_PATH=edonec-boilerplate-files
      - STORAGE_PROVIDER=S3
      - IMGPROXY_CACHE_CONTROL_PASSTHROUGH=true
      - IMGPROXY_SET_CANONICAL_HEADER=true
      - IMGPROXY_USE_ETAG=true
      - IMGPROXY_JPEG_PROGRESSIVE=true
      - IMGPROXY_JPEG_TRELLIS_QUANT=true
      - IMGPROXY_JPEG_OVERSHOOT_DERINGING=true
      - IMGPROXY_ENABLE_WEBP_DETECTION=true
      - IMGPROXY_ENFORCE_WEBP=true
      - IMGPROXY_PATH_PREFIX=/imgproxy
      - IMGPROXY_MAX_SRC_RESOLUTION=9999

    networks:
      - main-network
  proxy-balancer:
    restart: always
    build:
      context: .
      dockerfile: Dockerfile.proxy-balancer
    depends_on:
      - client
      - dashboard
      - auth
      - bucket
      - database
      - imgproxy
    ports:
      - "80:80"
      - "443:443"
    networks:
      - main-network

  client:
    image: ghcr.io/edonec/boilerplate/client:head
    environment:
      - HOST_URL=${HOST_URL}
      - NEXT_PUBLIC_GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - NEXT_PUBLIC_FACEBOOK_APP_ID=${FACEBOOK_APP_ID}
      - NEXT_PUBLIC_HOSTNAME=${HOST_URL}
      - NODE_ENV=${NODE_ENV}
    command: node server.js
    restart: always
    networks:
      - main-network

  dashboard:
    image: ghcr.io/edonec/boilerplate/dashboard:head
    restart: always
    environment:
      - HOST_URL=${HOST_URL}
      - NEXT_PUBLIC_HOSTNAME=${HOST_URL}
      - NODE_ENV=${NODE_ENV}
      - REACT_APP_GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - REACT_APP_FACEBOOK_APP_ID=${FACEBOOK_APP_ID}
      - REACT_APP_BASE_URL=/dashboard
      - REACT_APP_HOSTNAME=${HOST_URL}
      - PORT=${PORT}
    networks:
      - main-network

  auth:
    image: ghcr.io/edonec/boilerplate/auth:head
    restart: always
    command: node /app/index.js
    environment:
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - FACEBOOK_APP_ID=${FACEBOOK_APP_ID}
      - DATABASE_BASE_URI=mongodb://database:27017
      - HOST_URL=${HOST_URL}
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
      - DATABASE_URI=mongodb://database:27017/auth?authSource=admin
      - ACCESS_TOKEN_SECRET_KEY=${ACCESS_TOKEN_SECRET_KEY}
      - REFRESH_TOKEN_SECRET_KEY=${REFRESH_TOKEN_SECRET_KEY}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - TOKEN_EXPIRES_IN=${TOKEN_EXPIRES_IN}
      - REFRESH_TOKEN_EXPIRES_IN=${REFRESH_TOKEN_EXPIRES_IN}
      - NUMBER_OF_AUTH_TRIALS=5
      - KAFKA_BROKERS=broker:9092
      - UPLOAD_SECRET_KEY=${UPLOAD_SECRET_KEY}
      - ROOT_USER_EMAIL=${ROOT_USER_EMAIL}
      - ROOT_USER_PASSWORD=${ROOT_USER_PASSWORD}
      - MICROSERVICE_NAME=auth
      - REDIS_CLIENT=redis://cache:6379
      - RESET_PASSWORD_SECRET=YIa)XpHNZJ3Zh%LtJFjB)^uzIHhJkan4
      - RESET_PASSWORD_TOKEN_EXPIRES_IN=1d
    networks:
      - main-network
    depends_on:
      - database
  blogs:
    image: ghcr.io/edonec/boilerplate/blogs:staging
    restart: always
    command: node /app/index.js
    environment:
      - DATABASE_BASE_URI=mongodb://database:27017
      - HOST_URL=${HOST_URL}
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
      - DATABASE_URI=mongodb://database:27017/blogs?authSource=admin
      - ACCESS_TOKEN_SECRET_KEY=${ACCESS_TOKEN_SECRET_KEY}
      - REFRESH_TOKEN_SECRET_KEY=${REFRESH_TOKEN_SECRET_KEY}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - TOKEN_EXPIRES_IN=${TOKEN_EXPIRES_IN}
      - REFRESH_TOKEN_EXPIRES_IN=${REFRESH_TOKEN_EXPIRES_IN}
      - NUMBER_OF_AUTH_TRIALS=5
      - KAFKA_BROKERS=broker:9092
      - UPLOAD_SECRET_KEY=${UPLOAD_SECRET_KEY}
      - ROOT_USER_EMAIL=${ROOT_USER_EMAIL}
      - ROOT_USER_PASSWORD=${ROOT_USER_PASSWORD}
      - MICROSERVICE_NAME=blogs
      - REDIS_CLIENT=redis://cache:6379
    networks:
      - main-network
    depends_on:
      - database

  health:
    image: ghcr.io/edonec/boilerplate/health:head
    restart: always
    command: node /app/index.js
    environment:
      - DATABASE_BASE_URI=mongodb://database:27017
      - HOST_URL=${HOST_URL}
      - NODE_ENV=${NODE_ENV}
      - MICROSERVICE_NAME=health
      - DATABASE_URI=mongodb://database:27017/health?authSource=admin
      - PORT=${PORT}
      - ACCESS_TOKEN_SECRET_KEY=${ACCESS_TOKEN_SECRET_KEY}
      - REFRESH_TOKEN_SECRET_KEY=${REFRESH_TOKEN_SECRET_KEY}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - TOKEN_EXPIRES_IN=${TOKEN_EXPIRES_IN}
      - REFRESH_TOKEN_EXPIRES_IN=${REFRESH_TOKEN_EXPIRES_IN}
      - NUMBER_OF_AUTH_TRIALS=5
      - KAFKA_BROKERS=broker:9092
      - UPLOAD_SECRET_KEY=${UPLOAD_SECRET_KEY}
      - ROOT_USER_EMAIL=${ROOT_USER_EMAIL}
      - ROOT_USER_PASSWORD=${ROOT_USER_PASSWORD}
      - REDIS_CLIENT=redis://cache:6379
    networks:
      - main-network
    depends_on:
      - database

  bucket:
    image: ghcr.io/edonec/boilerplate/bucket:head
    restart: always
    command: node /app/index.js
    environment:
      - DATABASE_BASE_URI=mongodb://database:27017
      - HOST_URL=${HOST_URL}
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
      - DATABASE_URI=mongodb://database:27017/bucket?authSource=admin
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - KAFKA_BROKERS=broker:9092
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_BUCKET=edonec-boilerplate-files
      - PENDING_DURATION_MINUTES=1440
      - UPLOAD_SECRET_KEY=${UPLOAD_SECRET_KEY}
      - TMP_DIR_NAME=tmp
      - REDIS_CLIENT=redis://cache:6379

    networks:
      - main-network
    depends_on:
      - database

  categories:
    image: ghcr.io/edonec/boilerplate/categories:staging
    restart: always
    command: node /app/index.js
    environment:
      - DATABASE_BASE_URI=mongodb://database:27017
      - HOST_URL=${HOST_URL}
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
      - DATABASE_URI=mongodb://database:27017/boilerplate-categories?authSource=admin
      - ACCESS_TOKEN_SECRET_KEY=${ACCESS_TOKEN_SECRET_KEY}
      - REFRESH_TOKEN_SECRET_KEY=${REFRESH_TOKEN_SECRET_KEY}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - TOKEN_EXPIRES_IN=${TOKEN_EXPIRES_IN}
      - REFRESH_TOKEN_EXPIRES_IN=${REFRESH_TOKEN_EXPIRES_IN}
      - NUMBER_OF_AUTH_TRIALS=5
      - KAFKA_BROKERS=broker:9092
      - UPLOAD_SECRET_KEY=${UPLOAD_SECRET_KEY}
      - ROOT_USER_EMAIL=${ROOT_USER_EMAIL}
      - ROOT_USER_PASSWORD=${ROOT_USER_PASSWORD}
      - MICROSERVICE_NAME=categories
      - REDIS_CLIENT=redis://cache:6379
    networks:
      - main-network
    depends_on:
      - database

  og-image-generator:
    image: ghcr.io/edonec/boilerplate/og-image-generator:staging
    environment:
      - HOST_URL=${HOST_URL}
      - NEXT_PUBLIC_HOSTNAME=${HOST_URL}
      - NODE_ENV=${NODE_ENV}
      - REACT_APP_BASE_URL=og-image-generator
    command: node server.js
    restart: always
    networks:
      - main-network

  mailing:
    image: ghcr.io/edonec/boilerplate/mailing:staging
    restart: always
    command: node /app/index.js
    environment:
      - DATABASE_BASE_URI=mongodb://database:27017
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
      - DATABASE_URI=mongodb://database:27017/boilerplate-mailing?authSource=admin
      - ACCESS_TOKEN_SECRET_KEY=${ACCESS_TOKEN_SECRET_KEY}
      - REFRESH_TOKEN_SECRET_KEY=${REFRESH_TOKEN_SECRET_KEY}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - TOKEN_EXPIRES_IN=${TOKEN_EXPIRES_IN}
      - REFRESH_TOKEN_EXPIRES_IN=${REFRESH_TOKEN_EXPIRES_IN}
      - NUMBER_OF_AUTH_TRIALS=5
      - KAFKA_BROKERS=broker:9092
      - UPLOAD_SECRET_KEY=${UPLOAD_SECRET_KEY}
      - ROOT_USER_EMAIL=${ROOT_USER_EMAIL}
      - ROOT_USER_PASSWORD=${ROOT_USER_PASSWORD}
      - EMAIL_SENDER=no-reply@mpsy.tn
      - MICROSERVICE_NAME=mailing
      - REDIS_CLIENT=redis://cache:6379
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
    networks:
      - main-network
    depends_on:
      - database
  #  NEW_MICROSERVICE_PLACEHOLDER
  zookeeper:
    restart: always
    image: confluentinc/cp-zookeeper:7.0.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - main-network

  broker:
    restart: always
    image: confluentinc/cp-kafka:7.0.1
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - main-network

networks:
  main-network:
    driver: bridge
