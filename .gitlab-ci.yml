stages:
  - build
  - install
  - test

variables:
  APP_NAME: auth
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE/$APP_NAME:$CI_COMMIT_REF_SLUG
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/$APP_NAME:latest
  DOCKERFILE_PATH: ./.docker/Dockerfile.$APP_NAME
  RULES_CHANGES_PATH: "**/*"
  DOCKERFILE: "./.docker/**"

cache:
  paths:
    - node_modules/

.base-rules:
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull "$CONTAINER_RELEASE_IMAGE"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - $RULES_CHANGES_PATH
        - ./.docker/$DOCKERFILE
    - when: manual
      # TODO: REMOVE THIS
      allow_failure: true
  script:
    - docker build --cache-from $CONTAINER_RELEASE_IMAGE  -f $DOCKERFILE_PATH -t $CONTAINER_RELEASE_IMAGE .
    - docker push $CONTAINER_RELEASE_IMAGE

build auth:
  stage: build
  extends: .base-rules
  variables:
    APP_NAME: auth
    RULES_CHANGES_PATH: "./apps/auth"
    DOCKERFILE: "Dockerfile.auth"
  image: docker
  services:
    - docker:dind

build dashboard:
  stage: build
  extends: .base-rules
  variables:
    APP_NAME: dashboard
    RULES_CHANGES_PATH: "./apps/dashboard"
    DOCKERFILE: "Dockerfile.dashboard"
  image: docker
  services:
    - docker:dind

build client:
  stage: build
  extends: .base-rules
  variables:
    APP_NAME: client
    RULES_CHANGES_PATH: "./apps/client"
    DOCKERFILE: "Dockerfile.client"
  image: docker
  services:
    - docker:dind

build proxy_balancer:
  stage: build
  extends: .base-rules
  variables:
    APP_NAME: proxy-balancer
    RULES_CHANGES_PATH: "./proxy-balancer.conf"
    DOCKERFILE: "Dockerfile.proxy-balancer"
  image: docker
  services:
    - docker:dind

install dependencies:
  stage: install
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - "**/package.json"
        - package.json
  image: node:18-alpine
  script:
    - yarn install --frozen-lockfile
  artifacts:
    paths:
      - node_modules

test app:
  stage: test
  needs: [install dependencies]
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
  image: node:18-alpine
  script:
    - yarn install --frozen-lockfile
    - yarn test
